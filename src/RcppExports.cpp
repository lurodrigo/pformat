// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// teste
void teste(String& v);
RcppExport SEXP pformat_teste(SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< String& >::type v(vSEXP);
    teste(v);
    return R_NilValue;
END_RCPP
}
// is_integer
LogicalVector is_integer(CharacterVector v);
RcppExport SEXP pformat_is_integer(SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< CharacterVector >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(is_integer(v));
    return rcpp_result_gen;
END_RCPP
}
// pformat_parse
List pformat_parse(StringVector& format_string);
RcppExport SEXP pformat_pformat_parse(SEXP format_stringSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< StringVector& >::type format_string(format_stringSEXP);
    rcpp_result_gen = Rcpp::wrap(pformat_parse(format_string));
    return rcpp_result_gen;
END_RCPP
}
// pformat_parse_spec
List pformat_parse_spec(String& format);
RcppExport SEXP pformat_pformat_parse_spec(SEXP formatSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< String& >::type format(formatSEXP);
    rcpp_result_gen = Rcpp::wrap(pformat_parse_spec(format));
    return rcpp_result_gen;
END_RCPP
}
